Public Function Premium( _
    CALLorPUT, _
    UnadjustedPrice As Double, _
    StrikePrice As Double, _
    StartDate, _
    EndDate, _
    Volatility As Double, _
    RiskFreeRate, _
    Optional DividendYield = 0, _
    Optional WeekDaysOnlyMode As Boolean = False _
    )

'Copyright 2006 by power4XL.
'This software is licensed to the individual user who copied it from the power4XL.com website,
'for use only by that individiual on his/her personal and/or business computer.
'The software may not be distributed, published, emailed, posted on another website, edited,
'altered, or used in any other way without the express written permission of power4XL.com.
'The software is provided "as is" with no warranty of suitability for any purpose.
'No warranty is made with respect to the software's ability to provide correct and accurate results.
'The user of this code agrees to hold power4XL and its principals harmless against any
'loss or claim arising from the use of this software.
'The user agrees not to delete these provisions from the code.
'For further information, visit www.power4XL.com.


'Determine Call or Put (or Invalid Option Type Input)
If CALLorPUT = 0 Then
    OptionType = 0
ElseIf LCase(CALLorPUT) = "c" Then
    OptionType = 0
ElseIf LCase(CALLorPUT) = "call" Then
    OptionType = 0
ElseIf CALLorPUT = 1 Then
    OptionType = 1
ElseIf LCase(CALLorPUT) = "p" Then
    OptionType = 1
ElseIf LCase(CALLorPUT) = "put" Then
    OptionType = 1
Else
    Premium = CVErr(2015)
    Exit Function
End If


'Validate the input:
If Not IsNumeric(Volatility) Then
    Premium = CVErr(2015)
    Exit Function
ElseIf Not IsNumeric(EndDate) Then
    If Not IsDate(EndDate) Then
        Premium = CVErr(2015)
        Exit Function
    End If
ElseIf Not IsNumeric(StartDate) Then
    If Not IsDate(StartDate) Then
        Premium = CVErr(2015)
        Exit Function
    End If
ElseIf Not IsNumeric(UnadjustedPrice) Then
    Premium = CVErr(2015)
    Exit Function
ElseIf Not IsNumeric(StrikePrice) Then
    Premium = CVErr(2015)
    Exit Function
ElseIf Not IsNumeric(DividendYield) Then
    Premium = CVErr(2015)
    Exit Function
ElseIf Not IsNumeric(RiskFreeRate) Then
    Premium = CVErr(2015)
    Exit Function
ElseIf DividendYield < 0 Then
    Premium = CVErr(2036)
    Exit Function
ElseIf Volatility < 0 Then
    Premium = CVErr(2036)
    Exit Function
ElseIf UnadjustedPrice < 0 Then
    Premium = CVErr(2036)
    Exit Function
ElseIf StrikePrice < 0 Then
    Premium = CVErr(2036)
    Exit Function
ElseIf RiskFreeRate < 0 Then
    Premium = CVErr(2036)
    Exit Function
End If


NumDays = (EndDate - StartDate)

If NumDays < 0 Then
    Premium = CVErr(2036)
    Exit Function
End If


If WeekDaysOnlyMode = False Then
    Years = NumDays / 365.25
Else 'WeekDaysOnlyMode = True
    FullWeeks = Int(NumDays / 7)
    RemainderDays = ((NumDays / 7) - FullWeeks) * 7
    WeekendDays = (2 * FullWeeks) + Application.WorksheetFunction.Max(0, Application.WorksheetFunction.Min((Weekday(StartDate) + RemainderDays - 6), IIf(Weekday(StartDate) = 7, 1, 2)))
    Years = Application.WorksheetFunction.Max(0, (NumDays - WeekendDays)) / 252
End If



'If there's no time left, the premium is equal to the difference
'between strike price and underlying if in the money,
'and equal to zero if out of the money:
If Years = 0 Then
    Select Case OptionType
        Case 0
            Premium = Application.WorksheetFunction.Max(0, UnadjustedPrice - StrikePrice)
            Exit Function
        Case 1
            Premium = Application.WorksheetFunction.Max(0, StrikePrice - UnadjustedPrice)
            Exit Function
    End Select
End If


'Do the math:
If OptionType = 0 Then
    Premium = (UnadjustedPrice * Exp(-DividendYield * Years)) * Application.WorksheetFunction.NormSDist((Application.WorksheetFunction.Ln((UnadjustedPrice * Exp(-DividendYield * Years)) / StrikePrice) + (RiskFreeRate + 0.5 * Volatility ^ 2) * Years) / (Volatility * Years ^ 0.5)) - StrikePrice * Exp(-RiskFreeRate * Years) * Application.WorksheetFunction.NormSDist((Application.WorksheetFunction.Ln((UnadjustedPrice * Exp(-DividendYield * Years)) / StrikePrice) + (RiskFreeRate + 0.5 * Volatility ^ 2) * Years) / (Volatility * Years ^ 0.5) - Volatility * Years ^ (0.5))
ElseIf OptionType = 1 Then
    Premium = StrikePrice * Exp(-RiskFreeRate * Years) * Application.WorksheetFunction.NormSDist(-((Application.WorksheetFunction.Ln((UnadjustedPrice * Exp(-DividendYield * Years)) / StrikePrice) + (RiskFreeRate + 0.5 * Volatility ^ 2) * Years) / (Volatility * Years ^ 0.5) - Volatility * Years ^ (0.5))) - (UnadjustedPrice * Exp(-DividendYield * Years)) * Application.WorksheetFunction.NormSDist(-(Application.WorksheetFunction.Ln((UnadjustedPrice * Exp(-DividendYield * Years)) / StrikePrice) + (RiskFreeRate + 0.5 * Volatility ^ 2) * Years) / (Volatility * Years ^ 0.5))
End If

End Function

Public Function IVol( _
    CALLorPUT, _
    UnadjustedPrice As Double, _
    StrikePrice As Double, _
    StartDate, _
    EndDate, _
    OptionPremium As Double, _
    RiskFreeRate, _
    Optional DividendYield = 0, _
    Optional WeekDaysOnlyMode As Boolean = False, _
    Optional Precision = 0.0005 _
    )


'Copyright 2006 by power4XL.
'This software is licensed to the individual user who copied it from the power4XL.com website,
'for use only by that individiual on his/her personal and/or business computer.
'The software may not be distributed, published, emailed, posted on another website, edited,
'altered, or used in any other way without the express written permission of power4XL.com.
'The software is provided "as is" with no warranty of suitability for any purpose.
'No warranty is made with respect to the software's ability to provide correct and accurate results.
'The user of this code agrees to hold power4XL and its principals harmless against any
'loss or claim arising from the use of this software.
'The user agrees not to delete these provisions from the code.
'For further information, visit www.power4XL.com.



Dim GreaterThan As Double, _
    LessThan As Double, _
    Guess As Double, _
    Spread As Double, _
    GuessPremium As Variant
    


'Validate the input:
If Precision = 0 Then
    IVol = CVErr(2036)
    Exit Function
ElseIf Not IsNumeric(UnadjustedPrice) Then
    IVol = CVErr(2015)
    Exit Function
ElseIf Not IsNumeric(StrikePrice) Then
    IVol = CVErr(2015)
    Exit Function
ElseIf Not IsNumeric(EndDate) Then
    If Not IsDate(EndDate) Then
        IVol = CVErr(2015)
        Exit Function
    End If
ElseIf Not IsNumeric(StartDate) Then
    If Not IsDate(StartDate) Then
        IVol = CVErr(2015)
        Exit Function
    End If
ElseIf Not IsNumeric(OptionPremium) Then
    IVol = CVErr(2015)
    Exit Function
ElseIf Not IsNumeric(RiskFreeRate) Then
    IVol = CVErr(2015)
    Exit Function
ElseIf Not IsNumeric(DividendYield) Then
    IVol = CVErr(2015)
    Exit Function
ElseIf Not IsNumeric(Precision) Then
    IVol = CVErr(2015)
    Exit Function
ElseIf UnadjustedPrice < 0 Then
    IVol = CVErr(2036)
    Exit Function
ElseIf StrikePrice < 0 Then
    IVol = CVErr(2036)
    Exit Function
ElseIf OptionPremium < 0 Then
    IVol = CVErr(2036)
    Exit Function
ElseIf RiskFreeRate < 0 Then
    IVol = CVErr(2036)
    Exit Function
ElseIf DividendYield < 0 Then
    IVol = CVErr(2036)
    Exit Function
End If
    

'Determine Call or Put (or Invalid Option Type Input)
If CALLorPUT = 0 Then
    OptionType = 0
ElseIf LCase(CALLorPUT) = "c" Then
    OptionType = 0
ElseIf LCase(CALLorPUT) = "call" Then
    OptionType = 0
ElseIf CALLorPUT = 1 Then
    OptionType = 1
ElseIf LCase(CALLorPUT) = "p" Then
    OptionType = 1
ElseIf LCase(CALLorPUT) = "put" Then
    OptionType = 1
Else
    IVol = CVErr(2015)
    Exit Function
End If



GreaterThan = 0
LessThan = 0
Guess = 0.5

Do Until LessThan > 0
    
    GuessPremium = Premium( _
        OptionType, _
        UnadjustedPrice, _
        StrikePrice, _
        StartDate, _
        EndDate, _
        Guess, _
        RiskFreeRate, _
        DividendYield, _
        WeekDaysOnlyMode)


    If GuessPremium < OptionPremium Then
        GreaterThan = Guess
        Guess = Guess * 2
    Else
        LessThan = Guess
        Guess = GreaterThan + ((LessThan - GreaterThan) * 0.5)
    End If

Loop


Do Until LessThan - GreaterThan <= Precision
    GuessPremium = Premium( _
        OptionType, _
        UnadjustedPrice, _
        StrikePrice, _
        StartDate, _
        EndDate, _
        Guess, _
        RiskFreeRate, _
        DividendYield, _
        WeekDaysOnlyMode)
        
    If GuessPremium < OptionPremium Then
        GreaterThan = Guess
        Guess = GreaterThan + (0.5 * (LessThan - GreaterThan))
    Else
        LessThan = Guess
        Guess = LessThan - (0.5 * (LessThan - GreaterThan))
    End If
Loop

IVol = Guess

End Function
Public Function AVol( _
    Prices As Range, _
    Optional Dividends, _
    Optional DataInterval = 1, _
    Optional AnnualTradingDays = 252 _
    )

'Copyright 2006 by power4XL.
'This software is licensed to the individual user who copied it from the power4XL.com website,
'for use only by that individiual on his/her personal and/or business computer.
'The software may not be distributed, published, emailed, posted on another website, edited,
'altered, or used in any other way without the express written permission of power4XL.com.
'The software is provided "as is" with no warranty of suitability for any purpose.
'No warranty is made with respect to the software's ability to provide correct and accurate results.
'The user of this code agrees to hold power4XL and its principals harmless against any
'loss or claim arising from the use of this software.
'The user agrees not to delete these provisions from the code.
'For further information, visit www.power4XL.com.


Dim MyVal As Variant
Dim DailyReturns As Variant
Dim DailyReturnsSquared As Variant

' Set the TimePeriod value to 1.
'(This value is used differently in variants of this function.)
TimePeriod = 1

'Validate data:
    'Range must have at least 3 datapoints (= 2 intervals) for calculating standard deviation
    'NOTE:  DataCount is used later in the function as well.
    DataCount = Application.WorksheetFunction.Count(Prices)
    If DataCount < 3 Then
        AVol = CVErr(xlErrRef)
        Exit Function
    End If
    

    'Data ranges must be only ONE column wide OR one row high
    If Prices.Rows.Count > 1 Then
        If Prices.Columns.Count > 1 Then
            AVol = CVErr(xlErrRef)
            Exit Function
        End If
    End If
    If Not IsMissing(Dividends) Then
        If Dividends.Rows.Count > 1 Then
            If Dividends.Columns.Count > 1 Then
                AVol = CVErr(xlErrRef)
                Exit Function
            End If
        End If
    End If

    'DIV range must be same size as PRX range:
    PricesSize = 0
    For Each MyVal In Prices
        PricesSize = PricesSize + 1
    Next
    If Not IsMissing(Dividends) Then
        DivSize = 0
        For Each MyVal In Dividends
            DivSize = DivSize + 1
        Next
        If DivSize <> PricesSize Then
            AVol = CVErr(xlErrRef)
            Exit Function
        End If
    End If
      
'Deal with AnnualTradingDays.  In the US public markets,
'a typical year has 252 trading days.  Since price movement
'occurs only on trading days, a year is counted as the number
'of trading days rather than 365 days.
'
'Some markets or assets may experience price movements
'for a different number of days.  This optional variable
'allows the user to select an alternative number of
'annual trading days.  If no input is provided, the number
'is 252 by default.

If Not IsMissing(AnnualTradingDays) Then
    If Not IsNumeric(AnnualTradingDays) Then
        AVol = CVErr(xlErrValue)
        Exit Function
    ElseIf AnnualTradingDays > 365 Then
        AVol = CVErr(xlErrValue)
        Exit Function
    End If
End If
      

'Now adjust for the DATA INTERVAL passed to the function -
'i.e., does the Prices range contain daily, weekly, monthly, or other
'data?
'
'DATA INTERVAL can be passed to the function as a NUMBER,
'represented in NUMBER OF TRADING DAYS (i.e., for weekly volatility, pass "5"
'OR, may be passed with a one-character key as follows:
'   A = ANNUAL
'   S = SEMIANNUAL
'   Q = QUARTERLY
'   M = MONTHLY
'   B = BIWEEKLY
'   W = WEEKLY
'   D = DAILY

If Not IsMissing(DataInterval) Then
    If Not IsNumeric(DataInterval) Then
        If Not TypeName(DataInterval) = "String" Then
            AVol = CVErr(xlErrValue)
            Exit Function
        ElseIf Len(DataInterval) > 1 Then
            AVol = CVErr(xlErrValue)
            Exit Function
        Else
            DataInterval = UCase(DataInterval)
            Select Case DataInterval
                Case "A"
                    DataInterval = AnnualTradingDays
                Case "S"
                    DataInterval = 0.5 * AnnualTradingDays
                Case "Q"
                    DataInterval = 0.25 * AnnualTradingDays
                Case "M"
                    DataInterval = AnnualTradingDays / 12
                Case "B"
                    DataInterval = AnnualTradingDays / 26
                Case "W"
                    DataInterval = AnnualTradingDays / 52
                Case "D"
                    DataInterval = 1
                Case Else
                    AVol = CVErr(xlErrValue)
                    Exit Function
            End Select
        End If
    End If
End If




'Now prepare to do the math.
DailyReturns = 0
DailyReturnsSquared = 0


'Find the first data within the Price range variable
i = 1
Do Until Not IsEmpty(PrevVal)
    PrevVal = Prices(i)
    i = i + 1
Loop
FirstData = i


'Now caculate daily returns
TodaysDiv = 0
n = 1
For Each NewVal In Prices
    If n >= FirstData Then
        If Not IsEmpty(Prices(n)) Then
            If IsMissing(Dividends) Then
                TodaysDiv = 0
            Else
                TodaysDiv = Dividends(n)
            End If
            
            ThisDailyReturn = Application.WorksheetFunction.Ln((NewVal + TodaysDiv) / PrevVal)
            DailyReturns = DailyReturns + ThisDailyReturn
            DailyReturnsSquared = DailyReturnsSquared + (ThisDailyReturn ^ 2)
            PrevVal = NewVal
        End If
    End If
    n = n + 1
Next

Part1 = DailyReturnsSquared / (DataCount - 2)
Part2 = DailyReturns ^ 2 / ((DataCount - 1) * (DataCount - 2))

AVol = ((Part1 - Part2) ^ 0.5) * ((TimePeriod * AnnualTradingDays / DataInterval) ^ 0.5)

End Function


Public Function PutPremium( _
    UnadjustedPrice As Double, _
    StrikePrice As Double, _
    Years, _
    Volatility As Double, _
    RiskFreeRate, _
    Optional DividendYield = 0 _
    )
    
'Copyright 2006 by power4XL.
'This software is licensed to the individual user who copied it from the power4XL.com website,
'for use only by that individiual on his/her personal and/or business computer.
'The software may not be distributed, published, emailed, posted on another website, edited,
'altered, or used in any other way without the express written permission of power4XL.com.
'The software is provided "as is" with no warranty of suitability for any purpose.
'No warranty is made with respect to the software's ability to provide correct and accurate results.
'The user of this code agrees to hold power4XL and its principals harmless against any
'loss or claim arising from the use of this software.
'The user agrees not to delete these provisions from the code.
'For further information, visit www.power4XL.com.



'Validate the input:
If Not IsNumeric(Volatility) Then
    PutPremium = CVErr(2015)
    Exit Function
ElseIf Not IsNumeric(Years) Then
    PutPremium = CVErr(2015)
    Exit Function
ElseIf Not IsNumeric(UnadjustedPrice) Then
    PutPremium = CVErr(2015)
    Exit Function
ElseIf Not IsNumeric(StrikePrice) Then
    PutPremium = CVErr(2015)
    Exit Function
ElseIf Not IsNumeric(DividendYield) Then
    PutPremium = CVErr(2015)
    Exit Function
ElseIf Not IsNumeric(RiskFreeRate) Then
    PutPremium = CVErr(2015)
    Exit Function
ElseIf DividendYield < 0 Then
    PutPremium = CVErr(2036)
    Exit Function
ElseIf Volatility < 0 Then
    PutPremium = CVErr(2036)
    Exit Function
ElseIf Years < 0 Then
    PutPremium = CVErr(2036)
    Exit Function
ElseIf UnadjustedPrice < 0 Then
    PutPremium = CVErr(2036)
    Exit Function
ElseIf StrikePrice < 0 Then
    PutPremium = CVErr(2036)
    Exit Function
ElseIf RiskFreeRate < 0 Then
    PutPremium = CVErr(2036)
    Exit Function
End If



'If there's no time left, the premium is equal to the difference
'between strike price and underlying if in the money,
'and equal to zero if out of the money:
If Years = 0 Then
    PutPremium = Application.WorksheetFunction.Max(0, StrikePrice - UnadjustedPrice)
Else
'Do the math:
    PutPremium = StrikePrice * Exp(-RiskFreeRate * Years) * Application.WorksheetFunction.NormSDist(-((Application.WorksheetFunction.Ln((UnadjustedPrice * Exp(-DividendYield * Years)) / StrikePrice) + (RiskFreeRate + 0.5 * Volatility ^ 2) * Years) / (Volatility * Years ^ 0.5) - Volatility * Years ^ (0.5))) - (UnadjustedPrice * Exp(-DividendYield * Years)) * Application.WorksheetFunction.NormSDist(-(Application.WorksheetFunction.Ln((UnadjustedPrice * Exp(-DividendYield * Years)) / StrikePrice) + (RiskFreeRate + 0.5 * Volatility ^ 2) * Years) / (Volatility * Years ^ 0.5))
End If

End Function

Public Function CallPremium( _
    UnadjustedPrice As Double, _
    StrikePrice As Double, _
    Years, _
    Volatility As Double, _
    RiskFreeRate, _
    Optional DividendYield = 0 _
    )
    
'Copyright 2006 by power4XL.
'This software is licensed to the individual user who copied it from the power4XL.com website,
'for use only by that individiual on his/her personal and/or business computer.
'The software may not be distributed, published, emailed, posted on another website, edited,
'altered, or used in any other way without the express written permission of power4XL.com.
'The software is provided "as is" with no warranty of suitability for any purpose.
'No warranty is made with respect to the software's ability to provide correct and accurate results.
'The user of this code agrees to hold power4XL and its principals harmless against any
'loss or claim arising from the use of this software.
'The user agrees not to delete these provisions from the code.
'For further information, visit www.power4XL.com.



'Validate the input:
If Not IsNumeric(Volatility) Then
    CallPremium = CVErr(2015)
    Exit Function
ElseIf Not IsNumeric(Years) Then
    CallPremium = CVErr(2015)
    Exit Function
ElseIf Not IsNumeric(UnadjustedPrice) Then
    CallPremium = CVErr(2015)
    Exit Function
ElseIf Not IsNumeric(StrikePrice) Then
    CallPremium = CVErr(2015)
    Exit Function
ElseIf Not IsNumeric(DividendYield) Then
    CallPremium = CVErr(2015)
    Exit Function
ElseIf Not IsNumeric(RiskFreeRate) Then
    CallPremium = CVErr(2015)
    Exit Function
ElseIf DividendYield < 0 Then
    CallPremium = CVErr(2036)
    Exit Function
ElseIf Volatility < 0 Then
    CallPremium = CVErr(2036)
    Exit Function
ElseIf Years < 0 Then
    CallPremium = CVErr(2036)
    Exit Function
ElseIf UnadjustedPrice < 0 Then
    CallPremium = CVErr(2036)
    Exit Function
ElseIf StrikePrice < 0 Then
    CallPremium = CVErr(2036)
    Exit Function
ElseIf RiskFreeRate < 0 Then
    CallPremium = CVErr(2036)
    Exit Function
End If



'If there's no time left, the premium is equal to the difference
'between strike price and underlying if in the money,
'and equal to zero if out of the money:
If Years = 0 Then
    CallPremium = Application.WorksheetFunction.Max(0, UnadjustedPrice - StrikePrice)
Else
'Do the math:
    CallPremium = (UnadjustedPrice * Exp(-DividendYield * Years)) * Application.WorksheetFunction.NormSDist((Application.WorksheetFunction.Ln((UnadjustedPrice * Exp(-DividendYield * Years)) / StrikePrice) + (RiskFreeRate + 0.5 * Volatility ^ 2) * Years) / (Volatility * Years ^ 0.5)) - StrikePrice * Exp(-RiskFreeRate * Years) * Application.WorksheetFunction.NormSDist((Application.WorksheetFunction.Ln((UnadjustedPrice * Exp(-DividendYield * Years)) / StrikePrice) + (RiskFreeRate + 0.5 * Volatility ^ 2) * Years) / (Volatility * Years ^ 0.5) - Volatility * Years ^ (0.5))
End If

End Function

Public Function CallDelta( _
    UnadjustedPrice, _
    StrikePrice, _
    Years, _
    Volatility, _
    RiskFreeRate, _
    Optional DividendYield = 0 _
    )
'Copyright 2006 by power4XL.
'This software is licensed to the individual user who copied it from the power4XL.com website,
'for use only by that individiual on his/her personal and/or business computer.
'The software may not be distributed, published, emailed, posted on another website, edited,
'altered, or used in any other way without the express written permission of power4XL.com.
'The software is provided "as is" with no warranty of suitability for any purpose.
'No warranty is made with respect to the software's ability to provide correct and accurate results.
'The user of this code agrees to hold power4XL and its principals harmless against any
'loss or claim arising from the use of this software.
'The user agrees not to delete these provisions from the code.
'For further information, visit www.power4XL.com.
    If DividendYield Then
        MyAdjustedPrice = UnadjustedPrice * Exp(-DividendYield * Years)
    Else
        MyAdjustedPrice = UnadjustedPrice
    End If
    
    My_d1 = (Application.WorksheetFunction.Ln(MyAdjustedPrice / StrikePrice) + (RiskFreeRate + 0.5 * Volatility ^ 2) * Years) / (Volatility * Years ^ 0.5)
    
    CallDelta = Exp(-DividendYield * Years) * (Application.WorksheetFunction.NormSDist(My_d1))
    

End Function


Public Function PutDelta( _
    UnadjustedPrice, _
    StrikePrice, _
    Years, _
    Volatility, _
    RiskFreeRate, _
    Optional DividendYield = 0 _
    )
'Copyright 2006 by power4XL.
'For further information, visit www.power4XL.com.
    
    If DividendYield Then
        MyAdjustedPrice = UnadjustedPrice * Exp(-DividendYield * Years)
    Else
        MyAdjustedPrice = UnadjustedPrice
    End If
    
    My_d1 = (Application.WorksheetFunction.Ln(MyAdjustedPrice / StrikePrice) + (RiskFreeRate + 0.5 * Volatility ^ 2) * Years) / (Volatility * Years ^ 0.5)
    
    PutDelta = Exp(-DividendYield * Years) * (Application.WorksheetFunction.NormSDist(My_d1) - 1)
    

End Function


Public Function CallRho( _
    UnadjustedPrice, _
    StrikePrice, _
    Years, _
    Volatility, _
    RiskFreeRate, _
    Optional DividendYield = 0 _
    )
'Copyright 2006 by power4XL.
'For further information, visit www.power4XL.com.

    My_d2 = Option_d2( _
        UnadjustedPrice, _
        StrikePrice, _
        Years, _
        Volatility, _
        RiskFreeRate, _
        DividendYield _
        )

    CallRho = StrikePrice * Years * Exp(-RiskFreeRate * Years) * Application.WorksheetFunction.NormSDist(My_d2)
    

End Function


Public Function PutRho( _
    UnadjustedPrice, _
    StrikePrice, _
    Years, _
    Volatility, _
    RiskFreeRate, _
    Optional DividendYield = 0 _
    )

'Copyright 2006 by power4XL.
'For further information, visit www.power4XL.com.
    My_d2 = Option_d2( _
        UnadjustedPrice, _
        StrikePrice, _
        Years, _
        Volatility, _
        RiskFreeRate, _
        DividendYield _
        )

    PutRho = -StrikePrice * Years * Exp(-RiskFreeRate * Years) * Application.WorksheetFunction.NormSDist(-My_d2)
    
End Function


Public Function CallTheta( _
    UnadjustedPrice, _
    StrikePrice, _
    Years, _
    Volatility, _
    RiskFreeRate, _
    Optional DividendYield = 0 _
    )

'Copyright 2006 by power4XL.
'For further information, visit www.power4XL.com.

    If DividendYield Then
        MyAdjustedPrice = UnadjustedPrice * Exp(-DividendYield * Years)
    Else
        MyAdjustedPrice = UnadjustedPrice
    End If
    
    My_d1 = (Application.WorksheetFunction.Ln(MyAdjustedPrice / StrikePrice) + (RiskFreeRate + 0.5 * Volatility ^ 2) * Years) / (Volatility * Years ^ 0.5)
    
    My_d2 = My_d1 - Volatility * (Years ^ 0.5)
    
    
    Pi = Application.WorksheetFunction.Pi()
 
        
    My_Nd1 = 1 / ((2 * Pi) ^ 0.5) * Exp(-0.5 * My_d1 ^ 2)
    
   
    CallTheta = -(UnadjustedPrice * My_Nd1 * Volatility * Exp(-DividendYield * Years)) / (2 * (Years ^ 0.5)) + DividendYield * UnadjustedPrice * Application.WorksheetFunction.NormSDist(My_d1) * Exp(-DividendYield * Years) - RiskFreeRate * StrikePrice * Exp(-RiskFreeRate * Years) * Application.WorksheetFunction.NormSDist(My_d2)

End Function


Public Function PutTheta( _
    UnadjustedPrice, _
    StrikePrice, _
    Years, _
    Volatility, _
    RiskFreeRate, _
    Optional DividendYield = 0 _
    )
'Copyright 2006 by power4XL.
'For further information, visit www.power4XL.com.

    If DividendYield Then
        MyAdjustedPrice = UnadjustedPrice * Exp(-DividendYield * Years)
    Else
        MyAdjustedPrice = UnadjustedPrice
    End If
    
    My_d1 = (Application.WorksheetFunction.Ln(MyAdjustedPrice / StrikePrice) + (RiskFreeRate + 0.5 * Volatility ^ 2) * Years) / (Volatility * Years ^ 0.5)
    
    My_d2 = My_d1 - Volatility * (Years ^ 0.5)
    
    
    Pi = Application.WorksheetFunction.Pi()
 
        
    My_Nd1 = 1 / ((2 * Pi) ^ 0.5) * Exp(-0.5 * My_d1 ^ 2)

    PutTheta = -(UnadjustedPrice * My_Nd1 * Volatility * Exp(-DividendYield * Years)) / (2 * (Years ^ 0.5)) - DividendYield * UnadjustedPrice * Application.WorksheetFunction.NormSDist(-My_d1) * Exp(-DividendYield * Years) + RiskFreeRate * StrikePrice * Exp(-RiskFreeRate * Years) * Application.WorksheetFunction.NormSDist(-My_d2)

End Function


Public Function OptionGamma( _
    UnadjustedPrice, _
    StrikePrice, _
    Years, _
    Volatility, _
    RiskFreeRate, _
    Optional DividendYield = 0 _
    )
'Copyright 2006 by power4XL.
'For further information, visit www.power4XL.com.


    If DividendYield Then
        MyAdjustedPrice = UnadjustedPrice * Exp(-DividendYield * Years)
    Else
        MyAdjustedPrice = UnadjustedPrice
    End If
    
    My_d1 = (Application.WorksheetFunction.Ln(MyAdjustedPrice / StrikePrice) + (RiskFreeRate + 0.5 * Volatility ^ 2) * Years) / (Volatility * Years ^ 0.5)
    
    Pi = Application.WorksheetFunction.Pi()
        
    My_Nd1 = 1 / ((2 * Pi) ^ 0.5) * Exp(-0.5 * My_d1 ^ 2)

    OptionGamma = My_Nd1 * Exp(-DividendYield * Years) / (UnadjustedPrice * Volatility * (Years ^ 0.5))

End Function


Public Function OptionVega( _
    UnadjustedPrice, _
    StrikePrice, _
    Years, _
    Volatility, _
    RiskFreeRate, _
    Optional DividendYield = 0 _
    )

'Copyright 2006 by power4XL.
'For further information, visit www.power4XL.com.

    If DividendYield Then
        MyAdjustedPrice = UnadjustedPrice * Exp(-DividendYield * Years)
    Else
        MyAdjustedPrice = UnadjustedPrice
    End If
    
    My_d1 = (Application.WorksheetFunction.Ln(MyAdjustedPrice / StrikePrice) + (RiskFreeRate + 0.5 * Volatility ^ 2) * Years) / (Volatility * Years ^ 0.5)
    
    Pi = Application.WorksheetFunction.Pi()
        
    My_Nd1 = 1 / ((2 * Pi) ^ 0.5) * Exp(-0.5 * My_d1 ^ 2)

    OptionVega = UnadjustedPrice * (Years ^ 0.5) * My_Nd1 * Exp(-DividendYield * Years)

End Function


Public Function Option_d1( _
    UnadjustedPrice, _
    StrikePrice, _
    Years, _
    Volatility, _
    RiskFreeRate, _
    Optional DividendYield = 0 _
    )
    
'Copyright 2006 by power4XL.
'For further information, visit www.power4XL.com.
    If DividendYield Then
        MyAdjustedPrice = UnadjustedPrice * Exp(-DividendYield * Years)
    Else
        MyAdjustedPrice = UnadjustedPrice
    End If
    
    Option_d1 = (Application.WorksheetFunction.Ln(MyAdjustedPrice / StrikePrice) + (RiskFreeRate + 0.5 * Volatility ^ 2) * Years) / (Volatility * Years ^ 0.5)

End Function


Public Function Option_d2( _
    UnadjustedPrice, _
    StrikePrice, _
    Years, _
    Volatility, _
    RiskFreeRate, _
    Optional DividendYield = 0 _
    )

'Copyright 2006 by power4XL.
'For further information, visit www.power4XL.com.


Option_d2 = Option_d1( _
    UnadjustedPrice, _
    StrikePrice, _
    Years, _
    Volatility, _
    RiskFreeRate, _
    DividendYield _
    ) _
    - Volatility * Years ^ 0.5
    
End Function

Public Function ContCompRate(PeriodicRate, PeriodsPerYear)

'Copyright 2006 by power4XL.
'This software is licensed to the individual user who copied it from the power4XL.com website,
'for use only by that individiual on his/her personal and/or business computer.
'The software may not be distributed, published, emailed, posted on another website, edited,
'altered, or used in any other way without the express written permission of power4XL.com.
'The software is provided "as is" with no warranty of suitability for any purpose.
'No warranty is made with respect to the software's ability to provide correct and accurate results.
'The user of this code agrees to hold power4XL and its principals harmless against any
'loss or claim arising from the use of this software.
'The user agrees not to delete these provisions from the code.
'For further information, visit www.power4XL.com.


If PeriodsPerYear > 10000 Then
    ContCompRate = CVErr(2015)
    Exit Function
ElseIf PeriodsPerYear <= 0 Then
    ContCompRate = CVErr(2015)
    Exit Function
ElseIf Not IsNumeric(PeriodicRate) Then
    ContCompRate = CVErr(2015)
    Exit Function
ElseIf PeriodicRate < 0 Then
    ContCompRate = CVErr(2015)
    Exit Function
End If


ContCompRate = Application.WorksheetFunction.Ln((1 + (PeriodicRate / PeriodsPerYear)) ^ PeriodsPerYear)

End Function



Public Function AdjustedPrice( _
    UnadjustedPrice, _
    DividendYield, _
    Years _
    )
    
'Copyright 2006 by power4XL.
'For further information, visit www.power4XL.com.

    AdjustedPrice = UnadjustedPrice * Exp(-DividendYield * Years)

End Function

Function CAGR(Value1, Value2, Years)
    
'Copyright 2006 by power4XL.
'For further information, visit www.power4XL.com.


CAGR = ((Value2 / Value1) ^ (1 / Years)) - 1

End Function
Function WeightedAvg(Values As Range, Weights As Range)
    
    
'Copyright 2006 by power4XL.
'For further information, visit www.power4XL.com.

    MyCounter = 0
    MySumProduct = 0
    MySum = 0
    For Each MyValue In Values
        MyCounter = MyCounter + 1
        MySumProduct = MySumProduct + (MyValue * Weights(MyCounter))
        MySum = MySum + Weights(MyCounter)
    Next
           
    WeightedAvg = MySumProduct / MySum

End Function
